#summary Performance of Fog vs. other libraries.
#labels Featured

=Introduction=

This page contains output from Fog benchmark tool. Fog benchmark tool was written to tune Fog-Framework and to see other libraries in action. The benchmarks are very synthetic and long.

Benchmarks are designed to check speed of:
  * Fog (singlethreaded and multithreaded) - These two benchmarks should reveal differences between singlethreaded and multithreaded renderer.
  * GDI+ - To compare Fog with GDI+.
  * Cairo - To compare Fog with Cairo.

Usually the benchmarks for Cairo are run under Linux, and bechmarks fog GDI+ under Windows. You can also try the benchmark by configuring fog using 'configure-bench' command. It will build 'FogBench' file that can be run to do the tests.

=Benchmark Tests=

There are several tests that should show performance of invididual graphics operations.

  * *FillRect* - Fill rectangles aligned to pixel grid by single color. These rectangle fills are often optimized as special fast-paths, so this test will show how these special cases are optimized in tested libraries.
  * *FillRectAffine* - Similar to *FillRect* test, but each rectangle is rotated. This test should reveal cost of creating rasterizer and rasterizing the convex polygon.
  * *FillRound* - Fill rounded rectangles by single color. Rectangles are aligned to the pixel grid, but rounds are anti-aliased. This test should reveal the cost of using rasterizer and path flattening pipeline.
  * *FillPolygon* - Fill polygons by single color. Polygons are created using 10 random vertices and they may contain intersections.
  * *FillPattern* - Fill rectangles aligned to pixel grid by linear gradient pattern. This test was designed to show linear gradient performance only (this is reason why fill is aligned).
  * *Image* - Blend images aligned to pixel grid. Test to show image blending performance.
  * *ImageAffine* - Blend rotated images. Test to show image transform performance using bilinear interpolation.

The tests are usually configured to do 100.000 operations and result is time in [ms] for each kind of operation (this means that smaller is better). The (mt) comment in Fog tests means that multithreading was used, the number of threads is always determined as number of CPUs (or cores). The size of destination image is usually 640x480 and pixel format is PRGB32 (premultiplied 32-bit format with alpha channel).

In the future there will be probably more tests. Current tests were designed to tune Fog library, not to compete with others (this is also reason for gradient fills, image blitting and other tests that was used to tune raster pipeline).

=Benchmark Results=
Summary could be found in [BenchmarkSummaryTable Summary Table]

==Intel Quad Q6600 4x2.4GHz, 8GB RAM, Gentoo Linux 64-bit (dev-cpu)==

{{{
Fog benchmark tool v0.2

Surface  :640x480
Quantity :100000

Processor:Intel(R) Core(TM)2 Quad CPU Q6600 @ 2.40GHz
Features :MMX=yes, SSE=yes, SSE2=yes, SSE3=yes, cores=4

Fog (st)              |Size      |Time
----------------------+----------+---------------
FillRect              |10x10     |    37.847 [ms]
FillRectAffine        |10x10     |   409.101 [ms]
FillRound             |10x10     |   625.957 [ms]
FillPolygon           |10x10     |   659.118 [ms]
LinearGradient        |10x10     |    70.731 [ms]
Image                 |10x10     |    41.276 [ms]
ImageAffine           |10x10     |   405.381 [ms]
FillRect              |16x16     |    65.744 [ms]
FillRectAffine        |16x16     |   620.021 [ms]
FillRound             |16x16     |   811.593 [ms]
FillPolygon           |16x16     |   989.660 [ms]
LinearGradient        |16x16     |   128.722 [ms]
Image                 |16x16     |    81.195 [ms]
ImageAffine           |16x16     |   716.008 [ms]
FillRect              |32x32     |   177.817 [ms]
FillRectAffine        |32x32     |  1201.517 [ms]
FillRound             |32x32     |  1098.678 [ms]
FillPolygon           |32x32     |  1857.958 [ms]
LinearGradient        |32x32     |   419.227 [ms]
Image                 |32x32     |   253.030 [ms]
ImageAffine           |32x32     |  1953.055 [ms]
FillRect              |64x64     |   548.238 [ms]
FillRectAffine        |64x64     |  2507.619 [ms]
FillRound             |64x64     |  1745.459 [ms]
FillPolygon           |64x64     |  3608.254 [ms]
LinearGradient        |64x64     |  1493.321 [ms]
Image                 |64x64     |   808.352 [ms]
ImageAffine           |64x64     |  6194.829 [ms]
FillRect              |128x128   |  1867.434 [ms]
FillRectAffine        |128x128   |  5778.808 [ms]
FillRound             |128x128   |  3636.903 [ms]
FillPolygon           |128x128   |  7127.070 [ms]
LinearGradient        |128x128   |  5417.185 [ms]
Image                 |128x128   |  2903.752 [ms]
ImageAffine           |128x128   | 22224.954 [ms]
---------------------------------+---------------
Summary                          | 78485.814 [ms]

Fog (mt)              |Size      |Time
----------------------+----------+---------------
FillRect              |10x10     |   158.162 [ms]
FillRectAffine        |10x10     |   349.133 [ms]
FillRound             |10x10     |   454.112 [ms]
FillPolygon           |10x10     |   410.678 [ms]
LinearGradient        |10x10     |    90.758 [ms]
Image                 |10x10     |    95.882 [ms]
ImageAffine           |10x10     |   223.721 [ms]
FillRect              |16x16     |    90.621 [ms]
FillRectAffine        |16x16     |   388.558 [ms]
FillRound             |16x16     |   589.538 [ms]
FillPolygon           |16x16     |   477.297 [ms]
LinearGradient        |16x16     |   122.950 [ms]
Image                 |16x16     |    94.455 [ms]
ImageAffine           |16x16     |   294.521 [ms]
FillRect              |32x32     |   111.779 [ms]
FillRectAffine        |32x32     |   540.940 [ms]
FillRound             |32x32     |   562.043 [ms]
FillPolygon           |32x32     |   724.056 [ms]
LinearGradient        |32x32     |   181.735 [ms]
Image                 |32x32     |   121.194 [ms]
ImageAffine           |32x32     |   622.560 [ms]
FillRect              |64x64     |   218.406 [ms]
FillRectAffine        |64x64     |   940.106 [ms]
FillRound             |64x64     |   764.571 [ms]
FillPolygon           |64x64     |  1213.721 [ms]
LinearGradient        |64x64     |   426.295 [ms]
Image                 |64x64     |   279.591 [ms]
ImageAffine           |64x64     |  1700.041 [ms]
FillRect              |128x128   |   561.574 [ms]
FillRectAffine        |128x128   |  1814.167 [ms]
FillRound             |128x128   |  1247.221 [ms]
FillPolygon           |128x128   |  2215.558 [ms]
LinearGradient        |128x128   |  1378.721 [ms]
Image                 |128x128   |   814.135 [ms]
ImageAffine           |128x128   |  5795.917 [ms]
---------------------------------+---------------
Summary                          | 26074.717 [ms]

Cairo                 |Size      |Time
----------------------+----------+---------------
FillRect              |10x10     |   162.002 [ms]
FillRectAffine        |10x10     |  1319.293 [ms]
FillRound             |10x10     |  2823.590 [ms]
FillPolygon           |10x10     |  3505.212 [ms]
LinearGradient        |10x10     |   528.581 [ms]
Image                 |10x10     |   182.081 [ms]
ImageAffine           |10x10     |   864.008 [ms]
FillRect              |16x16     |   183.360 [ms]
FillRectAffine        |16x16     |  1659.477 [ms]
FillRound             |16x16     |  3050.502 [ms]
FillPolygon           |16x16     |  3955.682 [ms]
LinearGradient        |16x16     |   806.999 [ms]
Image                 |16x16     |   223.292 [ms]
ImageAffine           |16x16     |  1660.504 [ms]
FillRect              |32x32     |   292.107 [ms]
FillRectAffine        |32x32     |  2718.534 [ms]
FillRound             |32x32     |  5854.644 [ms]
FillPolygon           |32x32     |  5177.114 [ms]
LinearGradient        |32x32     |  2033.806 [ms]
Image                 |32x32     |   443.855 [ms]
ImageAffine           |32x32     |  5412.037 [ms]
FillRect              |64x64     |   696.701 [ms]
FillRectAffine        |64x64     |  5413.272 [ms]
FillRound             |64x64     |  8052.708 [ms]
FillPolygon           |64x64     |  7721.076 [ms]
LinearGradient        |64x64     |  6589.948 [ms]
Image                 |64x64     |  1219.820 [ms]
ImageAffine           |64x64     | 20341.883 [ms]
FillRect              |128x128   |  2155.571 [ms]
FillRectAffine        |128x128   | 13321.691 [ms]
FillRound             |128x128   | 14542.833 [ms]
FillPolygon           |128x128   | 13307.495 [ms]
LinearGradient        |128x128   | 24314.483 [ms]
Image                 |128x128   |  3554.819 [ms]
ImageAffine           |128x128   | 81187.395 [ms]
---------------------------------+---------------
Summary                          |245276.375 [ms]

---------------------------------+---------------
Fog (st)                         | 78485.814 [ms]
Fog (mt)                         | 26074.717 [ms]
Cairo                            |245276.375 [ms]
---------------------------------+---------------
}}}

=Discussion=

You can see that Fog-Framework is really fast compared to others, but can be even faster in future. The performance of filling aligned rectangles and blitting images to aligned pixel grid is near the borders. But performance of path rasterization and pattern rendering could be improved in the future. Currently performance can be improved by better memory management and rewriting some algorithms to use SSE2.

There is also evidence that multithreading helps mainly with painting larger objects. Most tests where size of object is small (about 16x16 pixels) were faster in singlethreaded mode. There is currently no way how to detect it and paint small objects singlethreaded, because multithreading is asynchronous and cost of synchronizing may be more expensive than just paint some smaller objects by less efficient way.

*Note*: Currently there is only one record, because benchmark tool was changed and will be changed in near future again. Radial gradient rendering was also removed, because there is no similar test in GDI+ and Cairo was terribly slow.

=Conclusion=

Fog-Framework is currently fastest library than all other tested libraries! GDI+ is faster in only one test (see ImageAffine results) and Cairo is so slow to win at least one test.