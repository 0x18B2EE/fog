#summary Performance of Fog vs. other libraries.
#labels Featured

=Introduction=

This page contains output from Fog benchmark tool. Fog benchmark tool was written to tune Fog-Framework and to see other libraries in action. The benchmarks are very synthetic and long.

Benchmarks are designed to check speed of:
  * Fog (singlethreaded and multithreaded) - These two benchmarks should reveal differences between singlethreaded and multithreaded renderer.
  * GDI+ - To compare Fog with GDI+.
  * Cairo - To compare Fog with Cairo.

Usually the benchmarks for Cairo are run under Linux, and bechmarks fog GDI+ under Windows. You can also try the benchmark by configuring fog using 'configure-bench' command. It will build 'FogBench' file that can be run to do the tests.

=Benchmark Tests=

There are several tests that should show performance of invididual graphics operations.

  * FillRect - Fill rectangles aligned to pixel grid by single color. These rectangle fills are often optimized as special fast-paths, so this test will show how these special cases are optimized in tested libraries.

  * FillRound - Fill rounded rectangles by single color. Rectangles are aligned to the pixel grid, but rounds are anti-aliased. This test should reveal the cost of using rasterizer pipeline.

  * FillPolygon - Fill polygons by single color. Polygons are created using 10 random vertices and they usually contain intersections.

  * FillPattern - Fill rectangles aligned to pixel grid by linear gradient pattern. This test was designed to show linear gradient performance only (this is reason why fill is aligned).

  * Image - Blend images aligned to pixel grid. Test to show image blending performance.

  * ImageAffine - Blend rotated images. Test to show image transform performance.

The tests are usually configured to do 100.000 operations and result is time in [ms] for each kind of operation (this means that smaller is better). The (mt) comment in Fog tests means that multithreading is used for tests, the number of threads is always determined as number of CPUs (or cores). The size of destination image is usually 640x480 and pixel format is PRGB32 (premultiplied 32-bit format with alpha channel).

In the future there will be probably more tests. Current tests were designed to tune Fog library, not to compete with others (this is also reason for gradient fills, image blitting and other tests that was used to tune raster pipeline).

=Benchmark Results=
Summary could be found in [BenchmarkSummaryTable Summary Table]

==Intel Quad Q6600 4x2.4GHz, 8GB RAM, Gentoo Linux 64-bit (dev-cpu)==

{{{
Fog benchmark tool v0.1

Surface=640x480, Quantity=100000
Intel(R) Core(TM)2 Quad CPU Q6600 @ 2.40GHz (MMX=yes, SSE=yes, SSE2=yes, SSE3=yes, cores=4)

Fog (st) - FillRect        [10x10] -> 38.300 [ms]
Fog (st) - FillRound       [10x10] -> 576 [ms]
Fog (st) - FillPolygon     [10x10] -> 653 [ms]
Fog (st) - LinearGradient  [10x10] -> 71.400 [ms]
Fog (st) - Image           [10x10] -> 50.100 [ms]
Fog (st) - ImageAffine     [10x10] -> 722 [ms]
Fog (st) - FillRect        [16x16] -> 67.400 [ms]
Fog (st) - FillRound       [16x16] -> 776 [ms]
Fog (st) - FillPolygon     [16x16] -> 971 [ms]
Fog (st) - LinearGradient  [16x16] -> 130 [ms]
Fog (st) - Image           [16x16] -> 99.600 [ms]
Fog (st) - ImageAffine     [16x16] -> 1210 [ms]
Fog (st) - FillRect        [32x32] -> 179 [ms]
Fog (st) - FillRound       [32x32] -> 1030 [ms]
Fog (st) - FillPolygon     [32x32] -> 1880 [ms]
Fog (st) - LinearGradient  [32x32] -> 387 [ms]
Fog (st) - Image           [32x32] -> 311 [ms]
Fog (st) - ImageAffine     [32x32] -> 3000 [ms]
Fog (st) - FillRect        [64x64] -> 548 [ms]
Fog (st) - FillRound       [64x64] -> 1720 [ms]
Fog (st) - FillPolygon     [64x64] -> 3600 [ms]
Fog (st) - LinearGradient  [64x64] -> 1430 [ms]
Fog (st) - Image           [64x64] -> 1050 [ms]
Fog (st) - ImageAffine     [64x64] -> 8860 [ms]
Fog (st) - FillRect        [128x128] -> 1870 [ms]
Fog (st) - FillRound       [128x128] -> 3620 [ms]
Fog (st) - FillPolygon     [128x128] -> 7140 [ms]
Fog (st) - LinearGradient  [128x128] -> 5290 [ms]
Fog (st) - Image           [128x128] -> 3200 [ms]
Fog (st) - ImageAffine     [128x128] -> 30300 [ms]

Fog (mt) - FillRect        [10x10] -> 171 [ms]
Fog (mt) - FillRound       [10x10] -> 605 [ms]
Fog (mt) - FillPolygon     [10x10] -> 389 [ms]
Fog (mt) - LinearGradient  [10x10] -> 107 [ms]
Fog (mt) - Image           [10x10] -> 117 [ms]
Fog (mt) - ImageAffine     [10x10] -> 536 [ms]
Fog (mt) - FillRect        [16x16] -> 113 [ms]
Fog (mt) - FillRound       [16x16] -> 695 [ms]
Fog (mt) - FillPolygon     [16x16] -> 474 [ms]
Fog (mt) - LinearGradient  [16x16] -> 113 [ms]
Fog (mt) - Image           [16x16] -> 116 [ms]
Fog (mt) - ImageAffine     [16x16] -> 673 [ms]
Fog (mt) - FillRect        [32x32] -> 136 [ms]
Fog (mt) - FillRound       [32x32] -> 656 [ms]
Fog (mt) - FillPolygon     [32x32] -> 732 [ms]
Fog (mt) - LinearGradient  [32x32] -> 176 [ms]
Fog (mt) - Image           [32x32] -> 159 [ms]
Fog (mt) - ImageAffine     [32x32] -> 1080 [ms]
Fog (mt) - FillRect        [64x64] -> 226 [ms]
Fog (mt) - FillRound       [64x64] -> 759 [ms]
Fog (mt) - FillPolygon     [64x64] -> 1270 [ms]
Fog (mt) - LinearGradient  [64x64] -> 421 [ms]
Fog (mt) - Image           [64x64] -> 345 [ms]
Fog (mt) - ImageAffine     [64x64] -> 2500 [ms]
Fog (mt) - FillRect        [128x128] -> 551 [ms]
Fog (mt) - FillRound       [128x128] -> 1260 [ms]
Fog (mt) - FillPolygon     [128x128] -> 2220 [ms]
Fog (mt) - LinearGradient  [128x128] -> 1580 [ms]
Fog (mt) - Image           [128x128] -> 905 [ms]
Fog (mt) - ImageAffine     [128x128] -> 8000 [ms]

Cairo - FillRect           [10x10] -> 153 [ms]
Cairo - FillRound          [10x10] -> 2800 [ms]
Cairo - FillPolygon        [10x10] -> 3470 [ms]
Cairo - LinearGradient     [10x10] -> 533 [ms]
Cairo - Image              [10x10] -> 177 [ms]
Cairo - ImageAffine        [10x10] -> 865 [ms]
Cairo - FillRect           [16x16] -> 180 [ms]
Cairo - FillRound          [16x16] -> 3040 [ms]
Cairo - FillPolygon        [16x16] -> 3920 [ms]
Cairo - LinearGradient     [16x16] -> 812 [ms]
Cairo - Image              [16x16] -> 223 [ms]
Cairo - ImageAffine        [16x16] -> 1670 [ms]
Cairo - FillRect           [32x32] -> 287 [ms]
Cairo - FillRound          [32x32] -> 5830 [ms]
Cairo - FillPolygon        [32x32] -> 5130 [ms]
Cairo - LinearGradient     [32x32] -> 2040 [ms]
Cairo - Image              [32x32] -> 449 [ms]
Cairo - ImageAffine        [32x32] -> 5410 [ms]
Cairo - FillRect           [64x64] -> 689 [ms]
Cairo - FillRound          [64x64] -> 8110 [ms]
Cairo - FillPolygon        [64x64] -> 7700 [ms]
Cairo - LinearGradient     [64x64] -> 6600 [ms]
Cairo - Image              [64x64] -> 1220 [ms]
Cairo - ImageAffine        [64x64] -> 20400 [ms]
Cairo - FillRect           [128x128] -> 2150 [ms]
Cairo - FillRound          [128x128] -> 14500 [ms]
Cairo - FillPolygon        [128x128] -> 13300 [ms]
Cairo - LinearGradient     [128x128] -> 24300 [ms]
Cairo - Image              [128x128] -> 3550 [ms]
Cairo - ImageAffine        [128x128] -> 81200 [ms]

Summary:
Fog (st)   - 80767.613 [ms]
Fog (mt)   - 27065.501 [ms]
Cairo      - 220660.592 [ms]
}}}

=Conclusion=

You can see that Fog library is really fast compared to others, but can be even faster in future. The performance of filling aligned rectangles and blitting images to aligned pixel grid is near the borders. But performance of path rasterization and pattern rendering could be improved in the future. Currently performance can be improved by better memory management and writing algorithms in SSE2.

*Note*: Currently there is only one record, because benchmark tool was changed. Radial gradient rendering was also removed, because there is no similar test in GDI+ and Cairo was terribly slow.