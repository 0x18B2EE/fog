#summary Roadmap
#labels Featured,Phase-Implementation

=Introduction=

This page contains Fog-Framework roadmap and goals, editable by project members. Initial items were copied from project TODO.

There are many libraries for computer graphics and UI. Each developer that want to create an application with user interface or visualization must choose set of libraries that will be used to do the job. Today's computers are so powerful and difference between slow and fast code is day by day smaller. This is reason why some libraries are terribly slow and there is nobody working on optimizations.

Fog-Framework is different. When library was in designing state (currently it still is) the main and most important requirement was high performance, integration and easy-of-use API. This is reason why Fog-Framework contains many classes not strictly related to computer graphics.

=Framework Libraries=

Fog-Framework currently contains these libraries:

  * Fog-Core - Platform Abstraction and Tools.
  * Fog-G2d - Vector 2d and Imaging.
  * Fog-UI - Vector User Interface.
  * Fog-Svg - SVG DOM, parser and renderer.

=Design Notes=

Fog-Framework design notes (in points):

 * Library depends only on libraries that are provided by target operating system.
   * Under Windows only WinAPI is used (other libraries like libpng can be used too, but you must first install them and enable them by build system).
   * Under Linux/BSD/MAC only freetype2, libjpeg and libpng libraries are needed (and libjpeg and libpng support can be disabled). By default Fog also tries to use fontconfig.
   * Under MAC also Cocoa is used and there is some code written in Objective-C. 
 * Do not use C++ STL library.
 * Do not use C++ RTTI (no dynamic casts) and C++ exceptions.
 * Critical code should support modern CPU extensions (MMX, SSE2).
 * Do not depend on X11 under Linux/BSD unless static linking is enabled (not default).

=TODO - Legend=

{{{
( ) Incomplete,
(x) Complete, removed from the list.
}}}

=TODO - Fog-Core=

  * Container refactorization
    * ( ) Rewrite containers in the following way, each container needs to have two variants - implicitly shared and non-shared.
    * ( ) Add possibility to any container to use statically based temporary storage, but simplify the design of these classes.
    * ( ) Introduce `Map<>`.
    * ( ) Introduce `HashSet<>`
    * ( ) Introduce `MapSet<>`
    * ( ) Introduce hash table that is able to use custom accessor in get / put / contains methods. See FontManager.cpp TODO entry.
    * ( ) Add ability to use owned-containers (no implicit sharing) to List / Hash.
    * ( ) `Fog::List<Fog::String>`::indexOf - Case sensitivity.
    * ( ) `Fog::List<>` and `Fog::Hash` - Filter.

  * Object and MetaClass:
    * ( ) `Fog::Object` should be lightweight object that supports properties, events, and signal&slot mechanism.

  * String:
    * ( ) Use SSE2/SSSE3 optimized functions in StringA/StringW.
    * ( ) `Fog::RegExp` - use TRex.
    * ( ) `Fog::String`/`Fog::Locale` - add support for group separators.

  * Locale:
    * ( ) Improve Locale, base the design of the class on Java Locale specification.

  * Streaming:
    * ( ) Text Streams (using `TextCodec`), including `err()`, `out()` and `in()`

  * Error framework:
    * ( ) Error framework that can translate ERR messages into string so we can display message instead of code.

  * XML Core:
    * ( ) Xml entities should be processed
    * ( ) Xml SAX/DOM writer is still not implemented

=TODO - Fog-G2d=

  * Painter and RasterEngine:
    * ( ) Ability to paint to A8 surface
    * ( ) Text transform
    * ( ) Text over path
    * Gradients
      * ( ) Better quality settings (low should use current algorithm, normal should use bilinear filtering and high should use bilinear filtering and super-sampling)
    * (x) High-quality downscaling (transformation / scaling down)
      * ( ) Write MMX version
      * ( ) Write SSE2 version
      * ( ) Use in painter when suitable
    * ( ) Glyph rendering must be two pass based
      * ( ) Apply glyph metrics, advance, etc, serialize to X, Y, `ImageData` array
      * ( ) Render using not `GlyphSet`, but `ImageSet`.
    * ( ) Compositing operators
      * ( ) Operator plugins in C++.
      * ( ) Operator plugins in Shader form.
      * ( ) Compositing operators using MMX.
      * ( ) Compositing operators using SSE2.
      * ( ) Compositing operators using SSSE3.
    * ( ) Implement ARGB (LCD) path rasterizer.

  * Font and Text Rendering:
    * ( ) Work on fonts and typography
    * ( ) Cache size control
    * ( ) Increase granularity of X position in glyphs to 3 (0.00, 0.33, 0.66), because vector fonts can be very sensitive in small sizes.
    * ( ) Text Iterator, retrieving glyph metrics, text metrics, individual glyphs and glyph sets.

  * Path and Vector Processing:
    * ( ) PathToRegion
    * ( ) RegionToPath (current implementation simply adds rectangles from region, do we need something better?
    * ( ) Add `addText()` to path

  * Color Utilities / Conversion:
    * ( ) Add basic compositing also to Argb so we can use some color transformations when drawing widgets.

  * Image / filtering:
    * ( ) Each effect should contain opacity value that will define blend factor of modified image into source image (this can be used by UI animations).
    * ( ) FeBlur
    * ( ) FeColorMatrix
    * ( ) FeComponentTransfer
    * ( ) FeSharpen
    * ( ) FeConvolveMatrix / FeConvolveSeparable
    * ( ) Add new image resampler (scale)
    * ( ) Redesign Image::scale(), use ROI (rectangle of interest) concept

  * Image IO:
    * ( ) Fix ICO reader (BMP / PNG)
    * ( ) Add ICO writer (BMP / PNG)
    * ( ) Rewrite completely GIF support
    * ( ) Fix BMP transparency detection (impossible?)

  * Geometry:
    * ( ) Curve-to-curve stroking
    * ( ) Curve dashing
    * ( ) Add more path mixing methods PathF::addPath(const PathD& other) and other (simpler api)
    * ( ) TransformD should allow transformation of single-precision (F) data

  * SVG:
    * ( ) Default color in Svg gradient should be 0.0:black, 1.0:white if no stops are provided

=TODO - Fog-UI=

  * New vector UI framework (Canvas)
    * ( ) Define the canvas API

=TODO - Refactorization=

  * (w) Some methods named `clear()` should be renamed to `reset()`, audit this (this doesn't apply to containers, strings, etc...)