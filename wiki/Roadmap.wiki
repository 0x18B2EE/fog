#summary Roadmap
#labels Featured,Phase-Implementation

=Introduction=

This page contains Fog-Framework roadmap and goals, editable by project members. Initial items were copied from project TODO.

There are many libraries for computer graphics and GUI development.. Each developer that want to create an application with user interface or visualization must choose set of libraries that will be used to do the job. Today's computers are so powerful and difference between slow and fast code is day by day smaller. This is reason why some libraries are terrible slow and there is nobody working on optimizations.

Fog-Framework is different. When library was in designing state (currently it still is) the main and most important requirement was performance, integration and easy-of-use API. This is reason why Fog-Framework contains many classes not strictly related to computer graphics. Low-level stuff is usually not exported so developers using Fog-Framework are using high-level classes resulting in excellent performance.

=Framework Libraries=

Fog-Framework currently contains these libraries:

  * Fog-Core - Platform abstraction library.
  * Fog-Graphics - 2d graphics API.
  * Fog-Gui - Platform independent UI toolkit.
  * Fog-Svg - SVG DOM, parser and renderer.
  * Fog-Xml - XML DOM, parser and writer.

=Design Notes=

Fog-Framework design notes (in points):

 * Library depends only to libraries that are installed on target operating system by default.
   * Under Windows only WinAPI is used (other libraries like libpng can be used too, but you must first install them and enable them by build system).
   * Under Linux/BSD/MAC only freetype2, libjpeg and libpng libraries are needed (and libjpeg and libpng support can be disabled). By default Fog also tries to use fontconfig.
 * Do not use C++ stl library.
 * Do not use RTTI (no dynamic casts) or exceptions.
 * Critical code should support modern CPU extensions (MMX, SSE2).
 * Do not depend to X11 under Linux/BSD.

=TODO - Legend=

{{{
( ) Incomplete
(x) Completed
(w) Working
}}}

=TODO - Fog-Core=

  * Object and MetaClass:
    * ( ) `Fog::Object` memory management should be hierarchy based. Allow adding Objects to Object, Widget will use different storage for added widgets. Introduce ChildEvent in `Fog::Object`.

  * String:
    * ( ) `Fog::RegExp` - use TRex
    * ( ) `Fog::String`/`Fog::Locale` - add support for group separators
    * ( ) `Temporary...<N>::free` sometimes not frees the memory? Investigate and remove this.
    * ( ) Introduce StringBuilder class / concept.

  * Classes:
    * ( ) Text Streams (using `TextCodec`), including `err()`, `out()` and `in()`

  * Logging framework:
    * ( ) Make minimalist and extensible logging framework, sometimes it's really needed to write something somewhere, but current API is not supporting it

  * Containers
    * ( ) Introduce LinkedHash, LinkedSet.
    * ( ) Introduce SortedHash, SortedSet.
    * ( ) Introduce hash table that is able to use custom accessor in get / put / contains methods. See FontManager.cpp TODO entry.
    * ( ) Add ability to use owned-containers (no implicit sharing) to List / Hash and Set ones.

=TODO - Fog-Graphics=

  * Painter and RasterEngine:
    * (w) Ability to paint to A8 surface.
    * (w) Set global opacity
    * (w) Text transform
    * ( ) Text over path
    * (w) Patterns transform
      * (w) Linear Gradient Transform
      * (w) Radial Gradient Transform
      * (w) Conical Gradient Transform
    * (w) Introduce `setClipPath()` / `resetClipPath()`
    * (w) High-quality downscaling (transformation / scaling down)
    * (w) Improve quality of gradient rendering, current is ok except PAD gradients where it looks really bad (unaliased).
    * (w) Glyph rendering must be two pass based
      * (w) Apply glyph metrics, advance, etc, serialize to X, Y, `ImageData` array
      * (w) Render using not `GlyphSet`, but `ImageSet`.
    * ( ) Raster Engine
      * ( ) ColorBurn (SVG operator)
      * ( ) ColorDodge (SVG operator)
      * ( ) HardLight (SVG operator)
      * ( ) SoftLight (SVG operator)
      * ( ) Overlay (SVG operator)
      * ( ) Arithmetic, with parameters! (SVG operator)
      * ( ) Allow possibility for operator plugins
      * ( ) Write some basic C/MMX/SSE2 composite functions for ARGB32
      * (x) Write C composite functions for XRGB32 and PRGB32
      * ( ) Write C composite functions for A8
      * ( ) Write MMX composite functions for XRGB32 and PRGB32
      * ( ) Write MMX composite functions for A8
      * (x) Write SSE2 composite functions for XRGB32 and PRGB32
      * ( ) Write SSE2 composite functions for A8
      * ( ) Specialize CLEAR operator in C implementation (performance TODO)
    * ( ) Add per/component alpha blending.

  * Font and Text Rendering:
    * (w) Ability to render to 'Path'
      * (x) Win32
      * (w) Freetype2
      * (w) Fix it - Kerning, Hinting
    * ( ) Cache size control
    * ( ) Increase granularity of X position in glyphs to 3 (0.00, 0.33, 0.66), because vector fonts can be very sensitive in small sizes.
    * (w) Text Iterator, retrieving glyph metrics, text metrics, individual glyphs and glyph sets.

  * Path and Vector Processing:
    * ( ) PathToRegion, RegionToPath
    * (x) Add `fitTo(RectF)`
    * ( ) Add `addText(Font, String32)` to path
    * ( ) What about warp?

  * Color Utilities / Conversion:
    * ( ) Add `ArgbUtil.h`, `ArgbUtil.cpp` and implement here basic compositing (blending, ...)
    * ( ) Add `rgbToHsv`, `hsvToRgb`

  * Image Filtering:
    * ( ) Image filters (Blur, Sharpen, ...) should be grouped and result should be `ImageFilter` class that will be able to do any image based transformations.
    * ( ) Each effect should contain opacity value that will define blend factor of modified image into source image (this can be used by UI animations).
    * ( ) Sharpen
    * ( ) Convolve

  * Image IO:
    * ( ) Fix ICO reader (BMP / PNG)
    * ( ) Add ICO writer (BMP / PNG)
    * ( ) Add GIF writer, rewrite GIF support
    * ( ) Fix BMP transparency detection (impossible?)

=TODO - Fog-Xml=

  * XML Core:
    * (w) XmlWriter

=TODO - Fog-Svg=

  * SVG Core:
    * ( ) Fix gradient rendering
    * ( ) Default color in Svg gradient should be 0.0:black, 1.0:white if no stops are provided

=TODO - Fog-Gui=

  * Top level window management:
    * (x) ability to create normal windows (resizeable/moveable, thick frame)
    * (x) ability to create non-resizeable windows (dialogs)
    * (x) ability to create tool-windows (the one with the small caption and only the "x"-button) for floating windows
    * (x) ability to handle min/max-button (turn on/off)
    * (x) ability to control system menu (click on icon on topleft of caption -> allow/disallow)
    * (x) ability to create frameless windows (popup)
    * (w) perhaps ability to create nonrect-windows, too
    * (x) ability to allow/disallow window-movements 
    * (x) ability to set/restore fullscreen mode
    * (w) modal windows support
    * (x) support for per pixel alpha blended windows 
    * (x) support for global transparency on windows
    * ( ) ability to provide a way to draw own frame/caption (complete themeable)
    * ( ) ability to use directdraw/opengl as a backend (with flipping backend handler!)
    * ( ) also some grouping methods for multiwindow-system would be cool.
    * (x) handling of Application::quit if last window was closed. Introducing EVENT_LAST_WINDOW_CLOSED and connecting it to Application::quit()?


  * Animation Support:
    * (w) introduce simple animation support to Fog. 
    * (w) possible to add fixed time animations (e.g. 200ms)
    * (w) possible to add fixed step animations (e.g. 20 Steps)
    * (w) add animation parameter to different widget-methods (show,hide,opacity...)

  * Layout Core:
    * (w) First define the API, what layout will do, what is expected that widget can calculate, how algorithms will be used to set / reset / recalculate the layout.
    * ( ) Purpose of LayoutEvent
    * ( ) CanvasLayout
    * ( ) FlowLayout
    * ( ) HBoxLayout/VBoxLayout
    * ( ) GridLayout
    * ( ) DockLayout

  * Widgets Low Level Management (DoubleBuffer, Clipping):
    * ( ) Make possibility to set transparent region in widget (not really transparent, but region where the background must be used first). Introduce `Widget::getPaintMode()`, `Widget::getBackgroundRegion()`.
    * ( ) Double buffering of child widgets (transparency, animations, effects).
    * ( ) Some widgets need to store background in separate buffer (Image).
    * ( ) Add client rectangle to the window (this is really needed, I though that it's not).
    * ( ) Each widget will contain widgets in client rectangle and hidden widgets outside of it (for scrollbars, list/grid headers, footers, etc).

  * Widgets Core:
    * ( ) Widget updating process is too complex, simplify it or document why it's complex. Is recursive alternative good to switch? (Petr, Stefan)

  * Theming:
    * ( ) What theming model to use. Currently the Windows-Theming-Model will be probably used with few extensions / additions.
    * ( ) Drawing themed component shouldn't depend to component instance.
    * ( ) Theming should be state based, animations must be possible.
    * ( ) Theme switch must be allowed.
    * ( ) Using different themes in the application should be possible by simply calling myWidget->setTheme(theme).
    * ( ) Theme may define also fonts, but the behavior should be configurable. For example I like themes, but I like to keeping my font settings for each. This means that the Widget::getFont() and Widget::setFont() family methods should be extended. For example introducing Widget::getThemeFont() / Widget::getActiveFont() methods ?

=TODO - Refactorization, Ideas=

  * ( ) `Fog::Image::formatToBytesPerPixel` -> `Fog::Image::getBytesPerPixelFromFormat()`
  * ( ) `Fog::RasterPaintEngine` - Use binary search to find first region if complex clipping is used.
  * (w) All getters (`get()` methods) should be declared before setters (`set()` methods)
  * (w) Make sure that all classes are using correct `getXXX()` methods
  * (w) Some methods named `clear()` should be renamed to `reset()`, audit this (this not applies to containers, strings, etc...)
  * (w) All enums and constants should be `UPPERCASED`.

=Concepts and Discussion=

New concepts / discussion here.

==Renaming Fog-Graphics to Fog-Graphics2d==

Just idea, if some day the opengl rendering will be added, we can extend the framework to use some 3d data types. I'd like to see this in different library than Fog-Graphics.

==Adding support for more pixel formats==

Currently there are only few libraries that allows to use 16-bit or floating point colors. It shouldn't be hard task to extend current architecture except for blitters - there are so many blitters and implementing each for 16-bit or 32-bit floating point colors will be wasting of binary space.

But ont the other hand, it can be useful for people that need rendering with extra precision.

==