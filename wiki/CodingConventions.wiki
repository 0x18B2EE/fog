#summary (incomplete) overview over the coding conventions.
#labels Phase-Implementation

<wiki:toc max_depth="3" />

=Identation, Position of Keywords Characters=

==Code Indentation==
Code inside `{}`-Braces should be indented for 2 whitespaces. 
Don't use tabs! 

==Braces==
Braces should always have there own line, for example: 
{{{
struct LocalStack
{
  struct Node
  {
    // some code here
  };
};
}}}

==Position of const-Keyword, Reference and Pointer character==
The const-keyword should always appear before the value type, for example: <br>
`const char* s = string->getData();`

The reference/pointer indicating character should always appear immidiatly behind the value type, for example: <br>
`EventLoop* createEventLoop(const String& type)`

==How to correctly pass parameters to a function?==
Instead of passing values to function, you should prefer a constant reference if the value‘s type is bigger than 4-8 bytes or it's not POD type.
Example: <br>
`EventLoop* createEventLoop(const String& type);` instead of <br>
`EventLopp* createEventLoop(String type);`. <br>
But you should although use: <br>
`err_t setInt(int32_t n, int base)`, and not: <br>
`err_t setInt(const int32_t& n, const int& base)`. <br>

Notice that for example 'Argb' is always passed as value, because it's just uint32_t wrapped in a structure, but ArgbStop is always passed as reference (it's primitive type, but it's too long to pass it as value).

=Commenting=

==Comment Style==
Comments should always start with a //. 

===Doxygen comments===
Fog uses Doxygen in order to document the source code. Doxygen comments should look like `//!`. 
Now, doxygen markups (e.g. `@verbatim`) can be used. For more information see Doxygen documentation. 

===File comments===
File comments should be at the top of each file. They should look like the following: 
{{{
    // [Fog/<MODULE> Library - C++ API]
    //
    // [Licence] 
    // MIT, See COPYING file in package
}}}
Always also insert copyright notices if you use other open source code.

===Personal Comments===
If you want to add personal comment to code (for example TODO, FIXME, etc) use standard uppercased form. If you want to add your name to it, use brackets. Example:
{{{
    // TODO(Petr): This code not works and will be fixed after 
    // feature X is implemented.

    ...

    // FIXME(Petr): MMX code broken.
}}}

===Code Section Commenting===
In order to name sections of code, what should actually be done very often, write the comments in formation `// [SECTION_TITLE]`. For example:
{{{
    // [Guard]
    #ifndef _FOG_CORE_AUTOLOCK_H
    #define _FOG_CORE_AUTOLOCK_H

    // [Dependencies]
    #include <Fog/Build/Build.h>

    #include <Fog/Core/Assert.h>
    #include <Fog/Core/Atomic.h>
    #include <Fog/Core/Lock.h>
}}}
  

=Naming Conventions=

==File names==
C++ source files always end with `.cpp`. Headers end with `.h`. Both are always starting with an upper case letter and use camel case notation, for example: <br>
{{{
    StringFilter.h
    StringFilter.cpp
}}}

==Include Guard==
All headers should start with an include guard, in order to prevent multiple inclusion. It should be in the format `_<PROJECT>_<MODULE>_<FILE>_H`, for example: 
{{{
    // [Guard]
    #ifndef _FOG_CORE_STRINGUTIL_H
    #define _FOG_CORE_STRINGUTIL_H`

    ...

    #endif // _FOG_CORE_STRINGUTIL_H
}}}

==Namespacing==
Everything, which belongs the Fog has to be declared inside the Fog namespace, but there are some typedefs which are not. For example Fog system types `sysint_t` and `sysuint_t` thats used similarly as `size_t` and `ssize_t` are declared inside global namespace. The `err_t` type is also declared in global namespace.

==Class/Struct Naming==
All classes/structs start with an uppercase letter and use camel case notation, for example:
{{{
    class/struct (FOG_API) StringCache;
}}}

==Function Naming==
All function start with a lowercase letter and use camel case notation, for example: 
{{{
    FOG_INLINE void* allocMyObject(sysuint_t size);
}}}

==Macro Naming==
All letters of macros should be uppercase. Every macro should start with a FOG_.

==Member Naming==
All private member variables always start with with a leading underscore, for example: 
{{{
  private:
    //! @brief Pointer to locked mutex.
    Lock* _target;
}}}

Sometimes private variables are declared as public, but contains underscore. Reason is that there are many C functions inside Fog library (for example C implementation, SSE2 implementation, etc...) and these functions need access to class members.

=Miscellaneous=

==0 and NULL==
`0` is used for integers, `0.0` is used for reals, `NULL` is used for pointers, `\0` or Char('\0') is used for chars.

==Use Fog Macros!==

===Inling functions===
In order to inline functions, use the FOG_INLINE macro. Notice that FOG_INLINE macro expands to compiler dependent way how to tell compiler to always inline a given code. If you don't want to inline code, but you want to declare it in header (for example in template) use FOG_NO_INLINE macro.

===Macros to Determine the Operating System at compile-time===
There are macros available, which can be used in order to determine the current operating system at compile-time.
These are in the format `FOG_OS_<PLATFORM>`. `PLATFORM` can be: WINDOWS, POSIX, LINUX, FREEBSD, OPENBSD, NETBSD, HPUX, MAC. For example: 
{{{
    #if defined(FOG_OS_WINDOWS)
     // do some windows stuff here
    #else
     // do some posix stuff here
    #endif
}}}

===Use integer typedefs (bit like in stdint)===
use standard C++ integer typedef as they are declared in the stdint header, which means:<br>
`int8_t` instead of `signed char`, <br>
`uint8_t` instead of `unsigned char`, <br>

`int16_t` instead of `short`, <br>
`uint16_t` instead of `unsigned short`, <br><br>

`sysint_t` instead of `int`, <br>
`sysuint_t` instead of `unsigned int`, <br>
(`sysint_t` decides between 32- and 64-bit) <br>

`sysint_t` and `sysuint_t` are Fog types that have same role as ssize_t and size_t types. They are used in places where you normally use size_t (string length, array length, ...).

==Column length of files==
The column length should always be 80 characters. If your code uses many inlines and code is bigger (for example 90-100 characters), keep in in one line.

==Infinite Loops==
When using infinite loops, they should start with `for (;;)`.

=Errors=
Return errors (by using `err_t`), don't throw them. Error codes are declared in `Error.h`.

TODO(Petr): Error codes were uppercased, I will fix this after my commit.

Possible errors are: 

==Error Range==
 * `_CoreErrorStart`
 * `_CoreErrorLast`

==Runtime Errors==

 * `OutOfMemory = _CoreErrorStart`
 * `NotImplemented`
 * `InvalidFunction`
 * `InvalidArgument`
 * `InvalidHandle`
 * `InvalidInput`
 * `InvalidPropertyName`
 * `InvalidPropertyValue`
 * `Overflow`
 * `PropertyIsReadOnly`

==IO Errors==
 * `IOInvalid`
 * `IOTooBig`
 * `IOEmpty`
 * `IOReadOnly`
 * `IOInvalidOffset`
 * `IONotAFile`
 * `IONotADirectory`
 * `IONotFound`
 * `FileSizeTooBig`
 * `EmptyFile`
 * `CantSeek`
 * `TruncateNotSupported`
 * `TruncateFailed`
 * `FileNotExists`
 * `DirectoryAlreadyExists`

==Collections==
 * `ObjectNotExists`
 * `ObjectAlreadyExists`

==Library Errors==
 * `LibraryOpenFailed`
 * `LibrarySymbolNotFound`

==TextCodec (StringUtil) Errors==
 * `InvalidCodec`
 * `InvalidUtf8Sequence`
 * `InvalidUtf16Sequence`
 * `InvalidUcs2Sequence`
 * `InvalidUnicodeCharacter`
 * `InputTruncated`

==OS==
 * `GetEnvFailure` 
 * `SetEnvFailure`